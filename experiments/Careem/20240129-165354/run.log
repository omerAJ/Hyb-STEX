2024-01-29 16:53:54: Experiment log path in: D:\omer\ST-SSL\experiments\Careem\20240129-165354
2024-01-29 16:53:54: Experiment configs are: Namespace(seed=31, device='cuda', mode='train', best_path='None', debug=False, data_dir='data', dataset='Careem', input_length=19, batch_size=32, test_batch_size=32, graph_file='data/Careem/adj_mx.npz', d_input=1, d_output=1, d_model=64, dropout=0.2, percent=0.1, shm_temp=0.5, nmb_prototype=2, yita=1, epochs=10, lr_init=0.001, early_stop=True, early_stop_patience=150, grad_norm=True, max_grad_norm=5, use_dwa=True, temp=4, num_nodes=285, log_dir='D:\\omer\\ST-SSL\\experiments\\Careem\\20240129-165354')
2024-01-29 16:53:56: Traceback (most recent call last):
  File "D:\omer\ST-SSL\main.py", line 59, in model_supervisor
    results = trainer.train() # best_eval_loss, best_epoch
              ^^^^^^^^^^^^^^^
  File "D:\omer\ST-SSL\model\trainer.py", line 110, in train
    train_epoch_loss, loss_t = self.train_epoch(epoch, loss_weights)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\omer\ST-SSL\model\trainer.py", line 58, in train_epoch
    repr1, repr2 = self.model(data, self.graph) # nvc
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\CITY3\.conda\envs\i-jepaVENV\Lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\CITY3\.conda\envs\i-jepaVENV\Lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\omer\ST-SSL\model\models.py", line 40, in forward
    repr2 = self.encoder(view2, graph2)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\CITY3\.conda\envs\i-jepaVENV\Lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\CITY3\.conda\envs\i-jepaVENV\Lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\omer\ST-SSL\model\layers.py", line 212, in forward
    self.s_sim_mx = sim_global(x_agg, sim_type='cos')
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\omer\ST-SSL\model\aug.py", line 19, in sim_global
    cos_scaling = torch.norm(flow_data, p=2, dim=(0, 2)) ** -1 # cal 2-norm of each node, dim N
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\CITY3\.conda\envs\i-jepaVENV\Lib\site-packages\torch\functional.py", line 1611, in norm
    return torch.linalg.vector_norm(input, _p, _dim, keepdim, dtype=dtype)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.


